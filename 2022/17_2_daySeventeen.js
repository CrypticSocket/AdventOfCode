let input1 = `>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>`
let input = `>><<<>><<<<>>><>><>>><<<>>>><>>><<><<<>>>><<<><<<><<><<<>>>><<><<>>><<<<>><<>><<<><<<<>><<<<><>>><<<<>>><<<>>>><<<>>>><<<<>>><<>>><<>>>><<<<>>>><<<<>><>>>><<<<>>><<>><>>><>>><<<<>>><<>>><>><<<>>>><<>>>><<<>>><<<>>>><<<<><<<><<>>><>><<<<>><>><<><<<<>>><<>>><<<>>>><<<<>>><<>>>><<<<>><>><<<><<>><<<>>>><<<>><<<<>>>><<<><<<<>>><<><>>><<>><<<>>><<<<>>><<>>>><<<>>><<<<>>><<>>>><<<<>><<>>>><<<>>>><<>>><<><<<>>><<<<>>>><<<<>>><<<>>>><<<<>><<<>>>><>>><><<>>><<<><<>>>><<<>>>><<><<<<>>>><<<><<>><<<<>>>><<>>><>>>><<<<>><<>>><<>>><<>><>><><<<<>>>><<<>><<>>><<><<<<>>>><<<<><<<<>>>><><<>>><><>>><<>>><>>><>>>><<>><><<>><>>><<>>>><<>>>><<<<><<<>>>><>><>>>><<<<><<<><<<>>>><<><<>><<<>>><<<<>>><<<<><<>>><<<>>>><<><<<<>><<<<>><<<><>><>>>><><<<>>><<<<><<<<>><>>><<<>><<<<><<<>>>><<<>>>><<<>><<>><<<<>><<<<>><>>>><<>>>><<<<>>><<>>>><<>>>><>><<<>>>><<<<>>><<<<><>>>><<><<<>><<<<>>>><<<<>><>>>><<<>>>><<<<>>>><<<<>>><<<<>><>>><<<<><>>>><<><>>>><>><<>>>><>>>><<>><<>>><<<>>>><<><<<>>>><<><<>><<<<>>><<<>>><<<<>><<<><<<>>><<><<>>>><<<>>><<>>><<<><<<<>>><>>>><<<>>><<<>>>><<><><<>>>><<>>>><<>>>><<>>><<>><<><<<>>><>>><<<<>>>><>>>><<<>><>><<<<>>><<<<>>><<>>><<<<><<<>>><>>>><<>><<<<>><<<<>><<<<><>><<<<>>>><<>>><>><<<>><<>><<<<>><<>>><<<<>>><<<<>>><<><<<>>><<><<<><<>>>><>><<><<<<><<>><<<>>>><><<<<><><><>>><<<>>><<>>><<<>>>><<><<>><<>><<<><<<<>>>><>>>><<>>>><<<>>>><<>>>><<<>><>><<<>>><<>>>><<><<>>>><<<><<<<>>><<<>>>><<<>>><<<><>>><<>>><<<>>>><<<>>>><<<>>>><<<>><>><<<>>><<<<>>>><><<<>>>><<>>>><><>>><<>>>><<>><<>>>><<<>><<<>>>><<>>>><<<<>><<<>><<<>><<>><<<>>><<><>>><<><<><>>>><<<>>>><<<<>><<>>>><<<<>><><<<>>><<<<>><<>>><<<>><<>><<>><>>>><<><<>>>><>>>><<><><<<><<<<>>>><<<<>><<><<><<>>>><>>><<<><<<<><<>><<<><<>><><<><<<>>>><>>>><<>>>><>><><><<<><<><<>>><<<<><<>><<<>>>><<><<<<>>>><<<<>><><<<<>><<>><>><<<<>>>><<>>>><<<<><<<>><<>>><<<>>><>>><<>>>><<<><<<<><<>>>><<<<>><<<>>>><<<>><<<<><<<>><<<<>><<<>>>><<>>>><><>>><>>><<<>>>><<>>><<<>><>>>><<<>>>><<<<><<<>>><<<<>><<>><<>><<<><<<<>>><><>><<<><<<>>><<<><<<<>>>><><<<<>><<>><>>><<<>>>><<>>><<<>><<<<>>><<<>><<>><<>><<<<><<>>><>><<>>><<><<<><<<>><<<<>>><>><><<<<>>>><<<><<<>><>><<>>>><<<>>>><<<><<<>>><<>>><><>><<<>><>>>><<<<>>>><<<<>>><<<<>>><<<<>><<<<><><<>><>><<>>><<>><<><<<<>>>><<<<>>>><<>>>><<<<>>>><<>>>><>>>><<>><<><<<><><>><<<><<<<>>>><<<<>><<<>>>><<<<>>>><>>>><><<<<>><>>><<<<><<>>>><>><<<<>><<<><<<>>>><<>><<>>><>>>><<><>>>><<<<><<><<<>>>><<<>>>><<><>><<<>><<<>><<<<><<>>><>><<>>><<>>><>>>><<<>>><<>><<><><<>>>><<<>>><<<>><<<>>><<<>>>><<>>><>>>><>>>><>>><<>>>><<<>><<<<>><<<<>><<>>>><><>>>><<>>>><<<><<<<><<>>>><<<<>><<<<>>>><><<<><>><<<<>>>><>>>><<<<>>>><<><>><<<<><<<>>><<<<>><>><>>>><<>>>><>>><>>>><>><<>>><<<><>><>>>><<<>><<<>><<<<><<<<>>><<<>>><<<>>>><>><>>><<<<>><<<><<>>><>>><<><>>>><<<>>>><<<<>>>><><<<>>><<<<>>><>><>>>><<<>><<>>>><>>><<<<>>>><<<>><<<>>>><<<<>><<<>>><<<<><<<<>>>><><<<>>><<<<>>>><<<<>><<>><<<>>><>>><>><<>>><<<>><><<><>><<>><>><<<><<<<>>><<<>><<<><<<>>>><<>>><<<<><<><<<>>><<<<>>><<>><>>><>>><<<><<>>>><<<>><<<<><<<>><<<<>><>><<>><>>>><>>>><<>>><<<<>>><><><><<<>>><<<>><<>>><<<<>>>><>><<<>>>><<>><<<<>><<>><>><<<>>>><>>><<<<>>><>><<>>><<<>><<<<>>>><<<>><<>><>><<<<>><<<><<<>><>><<<><<<>>>><<<<>>><<><<<<><<<<>>>><<<><>><<><>>><<<><<><<<<>>><<>>>><>><<<<>><<<<>>><<>>>><>>><<<>>><<<>>>><<>>><>>>><<<<><>><<>>>><<<>>><>>><>><<<>>>><<><<<>>>><<><<<<>>>><<<<>>>><><<<<>>>><<<>>>><<><<<>>>><<>><>><>>><<<<><<<>>>><<<<>>>><<<><<>>>><<<><>>>><<<<>>>><>>><<<>><<<<><<>>><<>>><<>>><>>><<<><><><<<>>>><<>>>><<<<><>>>><<<>><<>>>><<><<<<><<<<>><><<<<><<>>>><<<>><<<<>><<>><<><<>>>><<><<<><<<<><<<<>>><<<>>>><<<<>>><><<<>>><>>>><>>><<<<>>><<<>>><<<<><<<<><<>><><<<>>><>>><<><<><<>><<<<>>>><<<>><<<><<<<>>><<<<>>><<>><<<<>><>>>><>><<<><>>>><<<>>><<><<>><<<><<<>><<<<>><<<<>><<<<><>>>><<><<<>><<<><<<>><<<<><<>>>><<<>><<<><<<>>><<<><<<<>>>><<>>>><<<>><<<<>>><<><<<<>>>><<<<>>>><<>><<><<>>><<>>>><<>>><<>>><<<>>>><<>>><<><<>>><<<>><<<<>>><<>>><<<>>><<<>>><>>>><<<>>>><<<<>>>><>>>><<<>>>><<<>>>><>>>><>>>><<<><<>><><>><<>><><<<>>>><><>>>><><<<><>>><<<>>><<<>>><<<<>><<<<><<<>>><<>><<<<>>><<<>><<>>>><<><<<<>>><>><<<>>>><<>><<<<>>><<<<>>><>>>><<><<<>><<<<>>>><<>>>><<<<><<>><<>>><>>><><<<<>><<><<<>>>><<<<>>>><<<>>><<>>><><><<<<>>>><<>><><<<<><<<<>>>><<>>>><><<<><>>><>>>><<<><<<<>><<<<>>>><<<><<>><>>>><<>>>><<>>><<<><<<><<<<><<<<>><<<<><<<>>><><<<>>><<<>>>><<><<<<>>><>><<><<><>>><<>>><<<<>>>><<>>>><><<<<>>>><<><<<>>><<<><<<<><<<<>><<<>><><<>><<<<><<<><><<<>>><>>>><<<<>>>><<>>><<>>>><<>>>><<<<>><<<>><<>>>><>><>><<>>><<<<><>>><<<>>><<<<>>>><<>><>>>><<><<<<><<>>>><<<>><>>>><<>><>><<<<><<<<>>><>>>><><<<<>><<<>>><><<><>>>><<>>><<<<>>><>>>><<<<>>>><><>><>><<<>><<>><<<><>>>><><<<<>>><<><<<>>>><<<>><<>>><<<>><<<>>>><<>>>><>><><<>>><<>><>>><<<><<<>>>><<<<><<>>><<<>>>><<<<><<<<>>>><>><<<>><<><>>>><><<>>>><<><<<<>><<>>><<><<<>>>><>><<<>><<>>><<>><>>><<<>>><<<<>>><<<<>>>><<<>>>><<<><<>><>><<>>><>>><<>>>><<>>><<<<>>><>>>><<<<>><<<<>>>><<<<><<<>>><>>><<<><<<<><<<>>>><>>><>>>><<>>>><<>>>><<<>>>><><<<>><<>>>><<<><<>><<>>><<>>><<<>><<<><<><<>>>><>>>><<<<><<>>>><<><<<<><>>><<>><<>>><<>>>><<<><>>><<>>><<>>><<>><<<>><<>><<<<>>>><<><<<>>>><<<<>>>><<<>>><><>>><<>>><<>><<<<>>><<><>>>><<<<>>><<>>><<<><>>><>>><<<>>><<<<><<<>>>><<<>>>><<<>><<<<>>>><<<<>>>><<>>><<<<>>>><>>>><<<>>><<<<>>>><<><<<>><<<>>><<<>>><<>>><<<<><>>><<<>>>><<>>>><<<>>>><>><<<<><<<<>><<>>>><<<<>>><>><<<>><<<<><<>>>><<<<>>><<<>>><>><<><<<>>>><<<<>>>><<<<>><<<<>>>><<<<>>><<>>><<<>>>><>>><<<<>><<<<>>>><>>>><<<<><<>>><<<><<>>>><>>><<<>>>><<>>>><<>>><<<<><<<<><<>>>><<>>>><><<<<><>><<<<>>>><<<>><<>><<>>>><<><<<><<<<><<<<>>><><<><<<<>><<>>>><<<<>>>><<<<>>>><<>>>><<<>>>><<>>><<<>>>><<<><<>><>>>><><>><>><<<<>>><<<<><<<>>>><<>>><<<>><><<>><<<<>>>><<<><<<>><<<<>>><<<<>><<>><<>>>><<>>>><>>>><>>><<><<>>>><<<>><><<>>>><<<>>><<>>><<<>>><>>><<<<>><<<<><<<>><<>>>><<<>>><>>><<<<>><<<<>>>><<<<>><<<<><<<<><>>>><><<>>>><>>><<<<>>><<<<>>><>>>><<<><<>>><>>>><><<<<><>>>><>><<<><<>>><<><<<<>>><<<<>>><<<>>><<<>>><<>>>><<>>>><<<>><<<><<>>>><<<<>>><>>><<<><<<><>>><<><<>>>><>>>><<<<>><><<>>>><>><<<>>><>><<<<>>>><<<>>>><<<><><<<>>>><<>><<<>>>><<<><<>>><<>>><>>>><<>><<<<>>>><<>><>><<<>>>><>><<<<><<>><>>>><<<<>>>><<><<<>>>><<>>><<<>>><<<>><>>><<<>>><<<><<<>><<<<>>><<<<>><<>>>><>>><<<<>>><<<<>>><>>>><<<<><<>><<<<><><<<<><<<<>><<<<>>><<>>><>><<><<>>>><><<<><<<<><<<>>><>>>><<<<>>><>>>><>>>><<<<>>><<><>>>><<<<>><<<>>><<>>><<<<>>>><>>>><>>><<>><<<>><<<<>>>><<<<>><>>>><<>>><<<><>>>><<<>>><<<><>>>><<<<>><>><<<>>>><>>>><>>><<><<>>>><<>>><<<<>><<<>>><<>>>><<<>>>><<>>>><<<>>><<>><>>><>>>><<>>>><<<<>><<<><>>><<<>>>><<>><<>><>><<>><>>>><>>><<<>>><>><>><<<><>><<<<>>><<<>>>><<<<><<<<><<><<><<<>>><<<><<>><<>><<<>>>><<>>><<>><<<<>><<>><<<<>><>>><<<>>><<>>>><<>>>><<<<><<>><<<<>><<<<><>><<<<><<<<><<<<>>><<<<>><<<<><<<>><>>><>>><<<<>>>><<<<>><<<<>><><<<>><>>><<><<><<<<>>><<>>>><<<<><<<<>><<>><>><<<>>>><<>>><<<<><>>>><<<<>>><<<>>>><<<>>><<<<>><<<<>>><<>>>><><<<<>>><<<<>><<>><<<><><<<><<<><<>>>><<><<<><<>><<<><<<<>>><<<>>><<<<><<>>><<<><<<>>>><><<>>>><<<<><<<<><<<>>><<>>><<<<>>>><<<><>>><<>><<>><<<<>>><<<<><>>><>>><<>>>><><<<<>><><<<<>>><<>><<<<>>>><<<<>><>>>><>><<<<>>>><<>>><<<>>>><<<>><><<>><<<>>><<<>>>><>>>><<<<>><<>><<<>>><<<>>>><<<>>><<<<><<>>>><<<<>><<><<>>>><<<><>>>><<<>>>><>>>><<>>>><<<><<<><<<<>><>>>><<<<>>><><<>><>>><>>><<<>>>><<><>><>><><<<><>><<>><<<<>>><<<>><<<><<>><<<>>>><<<>>><<<<>>><<<>>>><<<>>><<<<>><<<>><>><<<<>>><<<<><<>>><<<<>>><<<>>><>><<><>>><>>>><<<>><<>>><<>>>><<<>>>><>><<><>>>><<<<><<<<><>><<<<>>><<<>>><<<>>><<<<>><<<<>><<<>><>><<>><<<>><<>>><>><<<<>><>><>><<><>><<>>><<><>><>><>><<>>><<<><<><><<>>><<>>>><><<>>><>>>><<<>>><<>>><<<<>>>><>>><<>>>><<><<<>>>><<<<>><>>>><<<<>>>><<<>>>><>>>><<>>><>>>><><><<<><<<<>><>>><<<<><>>>><<<<>>><<<>><<<<><<<<><<<>>>><<>>>><<<><<<>><<>><<<><<>>><<<>>><><<<>>>><<>><<>><>>><<<<>>>><<<<>><>><<<<>>><<<<>>><><<<>>>><<<>>><<<<>><<<><<<<>><<<>>><<<<>><<<>>>><>>><<><<>>>><<<>><<<<>>>><<<>>>><<<<>><<>>>><>>><<<>><<<><<<<><<<>>>><<<<><<>>>><<<<>><<<<>>><>><<<>><<<<>>><>><<><<>>><<<>><<<<>>><><<<>>><<<>>>><<<<>><<>>>><>>><<<<>><<<><>><<<<>>>><<<>><<<><<<>>>><<<>>>><<<<><><>>><<<>><<<<>>>><<<>>>><>><<>><>><>><<<<>>>><<<<>><>><<<<>>>><<<>>><<>>>><<>>><<>><<>>>><<<>>><<>>>><<<>>>><>><<<<>>><<>>>><><<<>>><<<<><>>><>>><<>>>><<>>>><<<>>>><<>>><<<>>>><>>><<><<>>>><<<>><<>><<<><<<<><<<<>>>><<>><>>>><<>>>><>><<><><<><>>><>>>><<<>>><<<>>><<><<<>>>><<>>>><<<<><><>><<>>><<<<>><<<<>>>><>>><<<<>>><<<><<><<>><<>>><<<><<<<>>>><<>><<<>><<<<>>><<<>><<<<><<<>>>><>>><<>>>><<<>>>><<<><>>>><>>><>><<>>><<>>><<<<><>>>><<>>>><<<<><<><<<<>><<><<<>>>><<<<>><<><<<<>>><>><>>>><<<>>>><>><>>>><<<>>><<><<<<>>>><>>>><>>>><<<>><<>>><<<>>><<<><>><<><<<<><<<<>>>><<<<>><<<<><<<><<<<>>>><>>><<<>><<<<><>>><>><<>>><<>><<>><<<>>><><>><<<>>><><<>>><<<<>>><<<<><>><<<>><<<<>><<<<><<<>>><<<<>>>><><<>>><<<>><<><<>><<>>>><<<<><>>>><<>>><>><<<<>><<<<>>><<>>><<<>>><>><<<><<<>><<<>>>><><>>><<<<>>>><<><>>><<>>>><<<<>><<<<>><<<<><<>>><<>>>><<<><<>>><><<<>>><<<<>><><>>>><<<>>>><<>>>><<>>>><<<<>>><<<<>>>><<<><<<<>>><>>><><>><>>><<>>>><>>><<>>>><>>>><><>>><>>><<<<>><<<<>>><<<<><<<<>>><><>>>><<>><<<<>>><<<>>>><<<>><<<>>><<<>>><<<<><><<<<>>>><<<>>>><<><<<>>><<<>>><>><<><>><<<<>>><>>><<<>><><<<>><<<<>>><>><<<<>>><<>><<<>><<<>>>><<<>><<<>>><<>><>><>>><>>>><<<>>><<<<><<<>>>><<<<>><<<>><<<<>>>><<><<<>><<>>>><<<<><<>>><<<<>><>>>><>>>><<<>>>><>>><<<<>><<>>>><>>>><<<>>><<>>><<<<><<<<>><<><<<>>>><<<<>><<>>><>><><<>>><<<<>><<<<>>>><>>>><<>><<><<<<><<<<>><>><<<>><>><><<<<>>>><<<<><<<<><<<>>><>>><>>><<>><<>>>><<>>><<<>><<<<>>><>><>>><>>><>>><<<<>><><<<<>><<>>><<>>><<<<>>>><<<<>>>><>>><>>><>>>><<<>>>><<<>>><>>><<>>>><<<<><<<<>>><<<>>>><<<>>>><>>><<<<>><<<>><>>>><<>>>><<<<>>><<<<>>>><<<>>>><<<>><<>><<<>><<<>><<<<>>><<<<>>><<<<><<<>><<><><<<<>><<<<><<<>>><<<<>>>><>>>><>>><<>><><<<<>><<<<>><><>>>><<<<>>><<>><<>>>><>>><<<><<>>>><<<<>><<<>>>><<<>>><<<<>>><<>>><<<<><<<<>>><<>><<>>><>>>><<<><<><>>><>>>><<<<>>>><<<<>>><<<><><<<>>>><><<<<>>>><<<<>>>><<><<<<>>><><<>>>><<<>>>><<><<>>><<>>><<>>><<<<>>>><<<<><<<<>>>><>>>><>><<>><><<<><<>>>><<>>>><><<<<>><<>>>><<><<<><>>>><<<<>><<<>>>><<<>><>>><<<<>>><<<<>>><>><<>><><<<<>><<>><<<<>><>>>><>>><<<><<<<>><<<<><>><<<>><<<<>`

let rocks = `####

.#.
###
.#.

..#
..#
###

#
#
#
#

##
##`

function start()
{
    let [allRocks, typesOfRocks] = processRocks(rocks)
    let numberOfRocks = 1000000000000
    let height = dropRocks(allRocks, typesOfRocks, numberOfRocks)
    // let period = input.length * typesOfRocks
    // let initialHeight = dropRocks(allRocks, typesOfRocks, period)
    // let period1Height = dropRocks(allRocks, typesOfRocks, period * 2)
    // let period2Height = dropRocks(allRocks, typesOfRocks, period * 3)
    // let periodicHeight = period2Height - period1Height

    // let numberOfPeriods = Math.floor(numberOfRocks / period)
    // let numberOfExtras = numberOfRocks % period
    // let heightInRepitition = periodicHeight * (numberOfPeriods - 1)
    // let extraHeight = dropRocks(allRocks, typesOfRocks, period + numberOfExtras)
    // let height = heightInRepitition + extraHeight
    console.log(height)
}

function getLCM(typesOfRocks) {

    let min = input.length > typesOfRocks ? typesOfRocks : input.length

    while(true)
    {
        if(input.length % min == 0 && typesOfRocks % min == 0)
        {
            break;
        }
        if(min > input.length && min > typesOfRocks)
        {
            min = input.length * typesOfRocks
            break;
        }
        min++
    }

    return min
}

function getCurrentMap(settledRocks, worldStatus)
{
    let arrayMap = Array.from(settledRocks).slice(-50).map(x => x.split(',').map(Number)).map(x => [worldStatus.height - x[0], x[1]])
    return arrayMap.map(x => x.join('+')).toString()
}

function dropRocks(rocks, types, numberOfRocks) {
    let worldStatus = {height : 0, inputCount : 0}
    let cacher = []
    let newHeight = 0
    // let oldHeight = 0
    // let tempPeriod = 0
    let settledRocks = new Set()
    for (let i = 0; i < numberOfRocks; i++) {

        // if(settledRocks.size > 2500)
        // {
        //     settledRocks = new Set(Array.from(settledRocks).slice(1500))
        // }
        let rock = spawnRock(i % types, worldStatus.height, rocks)
        moveRock(rock, settledRocks, worldStatus)
        // if(cacher[key] == null)
        // {
        //     cacher[key] = [worldStatus.height]
        // }
        // else{   
        //     cacher[key].push(worldStatus.height)
        // }

        let key = worldStatus.inputCount + '-' + (i % types) + getCurrentMap(settledRocks, worldStatus)
        let cacheData = cacher[key]

        if(cacheData != null)
        {
            [oldHeight, rockCount] = cacheData
            let remainingRocks = numberOfRocks - i
            let period = i - rockCount
            let heightDifference = worldStatus.height - oldHeight
            let numberOfPeriods = Math.floor(remainingRocks / period)
            newHeight = numberOfPeriods * heightDifference

            i += period * numberOfPeriods
            cacher = []
            // if(tempPeriod == 0)
            // {
            //     tempPeriod = i
            //     oldHeight = cacheData
            //     console.log(cacheData)
            // }
            // if(i % tempPeriod == 0)
            // {
            //     //console.log(cacheData - oldHeight)
            //     oldHeight = cacheData
            // }
        }
        cacher[key] = [worldStatus.height, i]
        
    }
    return worldStatus.height + newHeight
}

function moveRock(rock, settledRocks, worldStatus) {
    let hasRockStopped = false;
    let initialRock = [...rock]
    let initialInputCount = worldStatus.inputCount

    // let cacheData = cacher[initialInputCount + '-' + initialRock.toString()]
    // if(cacheData != null)
    // {
    //     worldStatus.height += cacheData
    // }
    // else
    // {
        while(!hasRockStopped)
        {
            worldStatus.inputCount = worldStatus.inputCount > input.length - 1 ? 0 : worldStatus.inputCount
            let direction = input[worldStatus.inputCount++]
            switch(direction)
            {
                case '>':
                    rock = moveRight(rock, settledRocks)
                    break;
                case '<':
                    rock = moveLeft(rock, settledRocks)
                    break;
            }
    
            [hasRockStopped, rock] = moveDown(rock, settledRocks)
        }
        // let initialHeight = worldStatus.height
        worldStatus.height = Math.max(...rock.map(x => x[0] + 1), worldStatus.height)
        // let heightChange = worldStatus.height - initialHeight
        // console.log(heightChange)
        // cacher[initialInputCount + '-' + initialRock.toString()] = heightChange
    // }

    // return cacher
}

function moveRight(rock, settledRocks)
{
    if( rock.some(r => (r[1] + 1) > 7-1 || settledRocks.has(r[0] + ',' + (r[1] + 1))))
    {
        return rock
    }
    return rock.map(x => [x[0], x[1] + 1])
}

function moveLeft(rock, settledRocks)
{
    if( rock.some(r => (r[1] - 1) < 0 || settledRocks.has(r[0] + ',' + (r[1] - 1))))
    {
        return rock
    }
    return rock.map(x => [x[0], x[1] - 1])
}

function moveDown(rock, settledRocks)
{
    if(rock.some(r => (r[0] - 1) < 0 || settledRocks.has((r[0] - 1) + ',' + r[1])))
    {
        
        rock.forEach(x => {
            settledRocks.add(x[0] +',' + x[1])
        })
        
        return [true, rock]
    }
    return [false, rock.map(x => [x[0] - 1, x[1]])]
}

function spawnRock(type, height, rocks) {
    let rock = getRock(type, rocks)
    return rock.map(x => [x[0] + height + 3, x[1] + 2])
}

function processRocks(rocksShapes) {
    let rocksStructure = []
    let rockTypes = rocksShapes.split('\n\n')
    let typesOfRocks = rockTypes.length
    let allRocks = rockTypes.map(x => x.split('\n'))
    allRocks.forEach(shape => {
        shape = shape.reverse()
        let rock = []
        for (let i = 0; i < shape.length; i++) {
        // let rockParts = []
            // console.log(rock[i])
            for (let j = 0; j < shape[i].length; j++) {
                if(shape[i][j] == '#')
                {
                    // rockCoordinates.push([i,j])
                    rock.push([i,j])
                }
            }
        }
        rocksStructure.push(rock)
    })

    return [rocksStructure, typesOfRocks]
}

function getRock(index, rocksStructure) {
    return rocksStructure[index]
}

start()